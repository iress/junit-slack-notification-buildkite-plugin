#!/bin/bash
# Add excecuting permission to run
# git update-index --chmod=+x hooks/command

if [ -z "$DIR" ]; then
  DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
fi

# shellcheck source=lib/shared.bash
. "$DIR/../lib/shared.bash"

if [ "$DEBUG" = "true" ]; then
  # display all environment variables except tokens
  env | grep -v TOKEN
fi

TOKEN_ENV_NAME="$(plugin_read_config SLACK_TOKEN_ENV_NAME "SLACK_TOKEN")"

TOKEN_VALUE=$(eval "echo \${$TOKEN_ENV_NAME:-}")

if [[ -z "${TOKEN_VALUE}" ]]; then
  echo "Missing \$SLACK_TOKEN_ENV_NAME environment variable... looking for alternative"
  TOKEN_VALUE="$(plugin_read_config SLACK_TOKEN "")"
fi

export TOKEN_VALUE
if [[ -z "${TOKEN_VALUE}" ]]; then
  echo "Missing Slack token: either use \$SLACK_TOKEN or \$SLACK_TOKEN_ENV_NAME to set environment variable"
  exit 1
fi

EXTRA_SLACK_MESSAGE_ENV_NAME="$(plugin_read_config EXTRA_SLACK_MESSAGE_ENV_NAME "EXTRA_SLACK_MESSAGE")"

EXTRA_SLACK_MESSAGE=$(eval "echo \${$EXTRA_SLACK_MESSAGE_ENV_NAME:-}")

if [ -z "${EXTRA_SLACK_MESSAGE}" ]; then
    echo "EXTRA_SLACK_MESSAGE is empty."
    EXTRA_SLACK_MESSAGE_TEMPLATE="$(plugin_read_config EXTRA_SLACK_MESSAGE "")"
    EXTRA_SLACK_MESSAGE=$(eval "echo \${$EXTRA_SLACK_MESSAGE_TEMPLATE:-}")
    if [ -z "${EXTRA_SLACK_MESSAGE}" ]; then
      echo "EXTRA_SLACK_MESSAGE is still empty."
    else
      echo "EXTRA_SLACK_MESSAGE is: ${EXTRA_SLACK_MESSAGE}"
    fi
else
    echo "EXTRA_SLACK_MESSAGE is: ${EXTRA_SLACK_MESSAGE}"
fi
export EXTRA_SLACK_MESSAGE;

PLUGIN_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)/.."

ARTIFACTS_DIR="$(pwd)/$(mktemp -d "junits-slack-notification-plugin-artifacts-tmp.XXXXXXXXXX")"
export ARTIFACTS_DIR

function cleanup {
  rm -rf "${ARTIFACTS_DIR}"
}

trap cleanup EXIT

cd "$PLUGIN_DIR"

if [[ -n "$(plugin_read_list TEST_SUITES_0_ARTIFACTS)" ]] ; then
  echo "--- :junit: Download each junits XML from the Test suites"
  i=0
  while true; do
    var="TEST_SUITES_${i}_ARTIFACTS"
    if [[ -n "$(plugin_read_list $var)" ]] ; then
      buildkite-agent artifact download \
          "$(plugin_read_config "${var}" "")" \
          "$ARTIFACTS_DIR"
      i=$((i+1))
    else
      break
    fi
  done
else
  echo "--- :junit: Download the junits XML"
  # Allows files download to fail (FATAL  Failed to download artifacts: No artifacts found for downloading)
  # and send "No tests data generated!" message to slack in this scenario
  buildkite-agent artifact download \
    "$(plugin_read_config ARTIFACTS "**/*.xml")" \
    "$ARTIFACTS_DIR"
fi

set -euo pipefail

echo "--- Send message to $(plugin_read_config SLACK_CHANNEL "???")"
make run
